
import numpy as np
import pandas as pd
import time

from sklearn.model_selection import train_test_split  
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.metrics import accuracy_score

# model imports
from sklearn.naive_bayes import GaussianNB
# from sklearn.naive_bayes import BernoulliNB
from sklearn.ensemble import GradientBoostingClassifier, AdaBoostClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier

import gc

from clean_data import read_data

# nohup python -u test_models.py &

print("Starting")
df = pd.read_csv('input/cleaned_train_1.csv')
print("Data read")
y = df['HasDetections'].values
cols = list(df)
cols.remove('HasDetections')
X = df[cols]

# df = read_data('input/train.csv')
# df.to_csv('input/cleaned_train_1.csv')

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

# to save memory
del 
x = gc.collect()

start = time.time()
print("Starting Gaussian model")
clf = GaussianNB()
print("Fitting Gaussian model")
clf.fit(X_train, y_train)
print("Predicting on y_pred")
y_pred = clf.predict(X_test)
print("Accuracy score:", accuracy_score(y_test, y_pred))
end = time.time() - start
print("Time taken:", end, '\n')

# change later
start = time.time()
print("Starting Gaussian model")
clf = GaussianNB()
print("Fitting Gaussian model")
clf.fit(X_train, y_train)
print("Predicting on y_pred")
y_pred = clf.predict(X_test)
print("Accuracy score:", accuracy_score(y_test, y_pred))
end = time.time() - start
print("Time taken:", end, '\n')

start = time.time()
print("Starting Gradient Boosting model")
clf = GradientBoostingClassifier()
print("Fitting model")
clf.fit(X_train, y_train)
print("Predicting on y_pred")
y_pred = clf.predict(X_test)
print("Accuracy score:", accuracy_score(y_test, y_pred))
end = time.time() - start
print("Time taken:", end, '\n')

start = time.time()
print("Starting Ada Boosting model")
clf = AdaBoostClassifier()
print("Fitting model")
clf.fit(X_train, y_train)
print("Predicting on y_pred")
y_pred = clf.predict(X_test)
print("Accuracy score:", accuracy_score(y_test, y_pred))
end = time.time() - start
print("Time taken:", end, '\n')

# print("Starting XGBoosting model")
# clf = XGBClassifier()
# print("Fitting model")
# clf.fit(X_train, y_train)
# print("Predicting on y_pred")
# y_pred = clf.predict(X_test)
# print("Accuracy score:", accuracy_score(y_test, y_pred), '\n')
