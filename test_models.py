
import numpy as np
import pandas as pd
import time

from sklearn.model_selection import train_test_split  
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.metrics import accuracy_score

# model imports
from sklearn.naive_bayes import GaussianNB
# from sklearn.naive_bayes import BernoulliNB
from sklearn.ensemble import GradientBoostingClassifier, AdaBoostClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier

import gc
from sklearn.externals import joblib

from clean_data import read_data_one, read_data_two
from models import get_split, run_clf

# nohup python -u test_models.py &

debug = False

print("Starting")

df, df2 = read_data_two('input/train.csv', 'input/test.csv', debug=debug)

# if debug:
# 	df = read_data('input/train_0_10000.csv')
# else:
# 	df = read_data('input/train.csv')

print("Data read")
# y = df['HasDetections'].values
# cols = list(df)
# cols.remove('HasDetections')
# X = df[cols]

# df = read_data('input/train.csv')
# df.to_csv('input/cleaned_train_1.csv')

# X_train, X_test, y_train, y_test = get_split(df)
# inputs = [X_train, X_test, y_train, y_test]

# to save memory
# del df
x = gc.collect()

# start = time.time()
# clf, clf_all = run_clf("Gaussian", inputs=inputs)
# end = time.time() - start
# print("Time taken:", end, '\n')

# print("Generating test probabilities")


start = time.time()
run_clf("Bernoulli", inputs=inputs)
end = time.time() - start
print("Time taken:", end, '\n')


start = time.time()
clf = run_clf("xgb", df, test=True)
end = time.time() - start
print("Time taken:", end, '\n')

print("Saving model")
joblib.dump(clf, "xgb.joblib")

# clf = joblib.load("xgb.joblib")

print("Generating test probabilities")
start = time.time()
pred = clf.predict_proba(df2)[:,1]

if debug:
	pred_val = 10000
	results = pd.read_csv('input/test.csv',
            usecols=['MachineIdentifier'], nrows=pred_val)
else:
	results = pd.read_csv('input/test.csv', usecols=['MachineIdentifier'])

results['HasDetections'] = pred
print("Time taken:", time.time() - start)
print("Writing to csv")

results[['MachineIdentifier','HasDetections']].to_csv('submission_test.csv', index=False)
print("Predictions written to submission_test.csv")


# start = time.time()
# run_clf("ada", inputs=inputs)
# end = time.time() - start
# print("Time taken:", end, '\n')

# start = time.time()
# run_clf("Logistic", inputs=inputs)
# end = time.time() - start
# print("Time taken:", end, '\n')

# print("Starting XGBoosting model")
# clf = XGBClassifier()
# print("Fitting model")
# clf.fit(X_train, y_train)
# print("Predicting on y_pred")
# y_pred = clf.predict(X_test)
# print("Accuracy score:", accuracy_score(y_test, y_pred), '\n')
