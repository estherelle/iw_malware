import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import (roc_curve, auc, accuracy_score)
import time

from clean_data import load

# model imports
import lightgbm as lgb
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression

from sklearn.naive_bayes import BernoulliNB

# uncomment below if you want to run on the whole thing
X = pd.read_csv("input/X.csv", nrows=1000)
y = np.load("input/y.npy")
y = y[:1000]

X_test = pd.read_csv("input/test_ohe.csv", nrows=1000)
test_firewall = df_test = pd.read_csv('input/test.csv',
            usecols=['Firewall'], nrows=1000)

X_test['Firewall'] = test_firewall['Firewall']
del test_firewall
X_test.replace({'Firewall': {np.nan: 0}}, inplace=True)

X.drop('Unnamed: 0', axis=1, inplace=True)
X_test.drop('Unnamed: 0', axis=1, inplace=True)

classifiers = {
	"RandomForest": RandomForestClassifier(),
	"AdaBoostClassifier": AdaBoostClassifier(),
	"GradientBoosting": GradientBoostingClassifier(),
	"BernoulliNB": BernoulliNB(),
	"LightGBM": lgb.LGBMClassifier()
}

clfs = list(classifiers.keys())

df_test = pd.read_csv('input/test.csv',
            usecols=['MachineIdentifier'], nrows=len(prob_pred))

for clf in clfs:
	start = time.time()
	mdl = classifiers[clf]
	print("Proceeding to fit the %s model" %clf)

	mdl.fit(X, y)
	print("Model fit complete- moving on to predict")

	prob_pred = mdl.predict_proba(X_test)

	time_taken = time.time() - start

	print("Finished predictions in %d seconds, saving predictions to submissions folder" %time_taken)

	
	df_test['HasDetections'] = prob_pred[::, 1]
	df_test[['MachineIdentifier','HasDetections']].to_csv('submissions/submission_%s.csv' %clf, index=False)


