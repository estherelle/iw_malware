from clean_data import load
import pandas as pd
import numpy as np
import time

import lightgbm as lgb

from sklearn.model_selection import train_test_split
from sklearn.metrics import (roc_curve, auc, accuracy_score)
from sklearn.model_selection import GridSearchCV

from sklearn.externals import joblib

# nohup python -u gridsearch.py &

print("Reading training file")
start = time.time()
train = pd.read_csv('input/train_ohe.csv', usecols=load)
# test = pd.read_csv('input/test_ohe.csv', usecols=load)

train.drop('Unnamed: 0', axis=1, inplace=True)
# test.drop('Unnamed: 0', axis=1, inplace=True)

print("Finished reading files and dropping unnamed column, took:", time.time() - start)

params = {'boosting_type': 'gbdt',
          'max_depth' : -1,
          'objective': 'binary',
          'nthread': 5, # Updated from nthread
          'num_leaves': 2048,
          'learning_rate': 0.05,
          'max_bin': 512,
          'subsample_for_bin': 200,
          'subsample': 1,
          'subsample_freq': 1,
          'colsample_bytree': 0.5,
          'reg_alpha': 5,
          'reg_lambda': 10,
          'min_split_gain': 0.5,
          'min_child_weight': 1,
          'min_child_samples': 5,
          'scale_pos_weight': 1,
          'num_class' : 1,
          'metric' : 'binary_error'}


# Create parameters to search

gridParams = {
    'learning_rate': [0.05],
    'n_estimators': [10000],
    'num_leaves': [2048],
    'boosting_type' : ['gbdt'],
    'objective' : ['binary'],
    'random_state' : [501], # Updated from 'seed'
    'colsample_bytree' : [0.65, 0.66],
    'subsample' : [0.7,0.75],
    'reg_alpha' : [1,1.2],
    'reg_lambda' : [1,1.2,1.4],
}

print("Defined classifier")
mdl = lgb.LGBMClassifier(boosting_type= 'gbdt',
          objective = 'binary',
          n_jobs = 3, # Updated from 'nthread'
          silent = True,
          max_depth = params['max_depth'],
          max_bin = params['max_bin'],
          subsample_for_bin = params['subsample_for_bin'],
          subsample = params['subsample'],
          subsample_freq = params['subsample_freq'],
          min_split_gain = params['min_split_gain'],
          min_child_weight = params['min_child_weight'],
          min_child_samples = params['min_child_samples'],
          scale_pos_weight = params['scale_pos_weight'])


grid = GridSearchCV(mdl, gridParams,
                    verbose=10,
                    cv=4,
                    n_jobs=4, scoring='roc_auc')

print("Fitting the grid")
grid.fit(train.drop("HasDetections", axis=1), train['HasDetections'])

# Print the best parameters found
print("Best parameters were")
print(grid.best_params_)
print("Best score", grid.best_score_)

print("Dumping best estimator")
joblib.dump(grid.best_estimator_, 'best_estimator.pkl')
print("Dumping best parameters")
joblib.dump(grid.best_params_, 'best_parameters.pkl')



