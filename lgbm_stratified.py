import lightgbm as lgb
import time
import gc

import pickle
import numpy as np

import pandas as pd
from clean_data import load
from sklearn.model_selection import StratifiedKFold


debug = True

print("Starting to load data")

start = time.time()
if debug:
	df_train = pd.read_csv('input/train_ohe.csv', usecols=load, nrows=10000)
	df_test = pd.read_csv('input/test_ohe.csv', usecols=load, nrows=10000)
else:
	df_train = pd.read_csv('input/train_ohe.csv', usecols=load)
	df_test = pd.read_csv('input/test_ohe.csv', usecols=load)

df_train.drop('Unnamed: 0', axis=1, inplace=True)
df_test.drop('Unnamed: 0', axis=1, inplace=True)

print("Data loaded in", time.time() - start, "seconds.")

with open('best_parameters_grid0.pkl', 'rb') as f:
#     params = pickle.load(f)
    params = pickle.load(f)

print("Creating model with best parameters")
mdl = lgb.LGBMClassifier(**params)

start = time.time()
pred_val = np.zeros(len(df_test))
folds = StratifiedKFold(n_splits=5, shuffle=True)

print("Beginning training")
ct = 0
for idxT, idxV in folds.split(df_train.drop("HasDetections", axis=1), df_train['HasDetections']):
    # TRAIN LGBM
    ct += 1; print('####### FOLD ',ct,'#########')
    df_trainA = df_train.loc[idxT]
    df_trainB = df_train.loc[idxV]
    model = mdl
    h=model.fit(df_trainA.drop("HasDetections", axis=1), df_trainA['HasDetections'], eval_metric='auc',
            eval_set=[(df_trainB.drop("HasDetections", axis=1), df_trainB['HasDetections'])], verbose=200,
            early_stopping_rounds=100)
    
    # PREDICT TEST
    del df_trainA, df_trainB; x=gc.collect()
    idx = 0; ct2 = 1; 

    if not debug:
    	chunk = 1000000
    else:
    	chunk = 100
    print('Predicting test...')
    while idx < len(df_test):
        idx2 = min(idx + chunk, len(df_test) )
        idx = range(idx, idx2)
        pred_val[idx] += model.predict_proba(df_test.iloc[idx])[:,1]
        #print('Finished predicting part',ct2)
        ct2 += 1; idx = idx2
print("Time taken:", time.time() - start)

print("Writing submission file")
# WRITE SUBMISSION FILE
df_test = pd.read_csv('input/test.csv',
            usecols=['MachineIdentifier'], nrows=len(pred_val))
df_test['HasDetections'] = pred_val / 5
df_test[['MachineIdentifier','HasDetections']].to_csv('submission_lgbm_ohe.csv', index=False)