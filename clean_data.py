import numpy as np
import pandas as pd
import os
import re

from sklearn.model_selection import train_test_split  
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.metrics import accuracy_score


# model imports
from sklearn.naive_bayes import GaussianNB

dtypes = {
	'MachineIdentifier':                                    'category',
	'ProductName':                                          'category',
	'EngineVersion':                                        'category',
	'AppVersion':                                           'category',
	'AvSigVersion':                                         'category',
	'IsBeta':                                               'int8',
	'RtpStateBitfield':                                     'float16',
	'IsSxsPassiveMode':                                     'int8',
	'DefaultBrowsersIdentifier':                            'float32',
	'AVProductStatesIdentifier':                            'float32',
	'AVProductsInstalled':                                  'float16',
	'AVProductsEnabled':                                    'float16',
	'HasTpm':                                               'int8',
	'CountryIdentifier':                                    'int16',
	'CityIdentifier':                                       'float32',
	'OrganizationIdentifier':                               'float16',
	'GeoNameIdentifier':                                    'float16',
	'LocaleEnglishNameIdentifier':                          'int16',
	'Platform':                                             'category',
	'Processor':                                            'category',
	'OsVer':                                                'category',
	'OsBuild':                                              'int16',
	'OsSuite':                                              'int16',
	'OsPlatformSubRelease':                                 'category',
	'OsBuildLab':                                           'category',
	'SkuEdition':                                           'category',
	'IsProtected':                                          'float16',
	'AutoSampleOptIn':                                      'int8',
	'PuaMode':                                              'category',
	'SMode':                                                'float16',
	'IeVerIdentifier':                                      'float16',
	'SmartScreen':                                          'category',
	'Firewall':                                             'float16',
	'UacLuaenable':                                         'float32',
	'UacLuaenable':                                         'float64', # was 'float32'
	'Census_MDC2FormFactor':                                'category',
	'Census_DeviceFamily':                                  'category',
	'Census_OEMNameIdentifier':                             'float32', # was 'float16'
	'Census_OEMModelIdentifier':                            'float32',
	'Census_ProcessorCoreCount':                            'float16',
	'Census_ProcessorManufacturerIdentifier':               'float16',
	'Census_ProcessorModelIdentifier':                      'float32', # was 'float16'
	'Census_ProcessorClass':                                'category',
	'Census_PrimaryDiskTotalCapacity':                      'float64', # was 'float32'
	'Census_PrimaryDiskTypeName':                           'category',
	'Census_SystemVolumeTotalCapacity':                     'float64', # was 'float32'
	'Census_HasOpticalDiskDrive':                           'int8',
	'Census_TotalPhysicalRAM':                              'float32',
	'Census_ChassisTypeName':                               'category',
	'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32', # was 'float16'
	'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32', # was 'float16'
	'Census_InternalPrimaryDisplayResolutionVertical':      'float32', # was 'float16'
	'Census_PowerPlatformRoleName':                         'category',
	'Census_InternalBatteryType':                           'category',
	'Census_InternalBatteryNumberOfCharges':                'float64', # was 'float32'
	'Census_OSVersion':                                     'category',
	'Census_OSArchitecture':                                'category',
	'Census_OSBranch':                                      'category',
	'Census_OSBuildNumber':                                 'int16',
	'Census_OSBuildRevision':                               'int32',
	'Census_OSEdition':                                     'category',
	'Census_OSSkuName':                                     'category',
	'Census_OSInstallTypeName':                             'category',
	'Census_OSInstallLanguageIdentifier':                   'float16',
	'Census_OSUILocaleIdentifier':                          'int16',
	'Census_OSWUAutoUpdateOptionsName':                     'category',
	'Census_IsPortableOperatingSystem':                     'int8',
	'Census_GenuineStateName':                              'category',
	'Census_ActivationChannel':                             'category',
	'Census_IsFlightingInternal':                           'float16',
	'Census_IsFlightsDisabled':                             'float16',
	'Census_FlightRing':                                    'category',
	'Census_ThresholdOptIn':                                'float16',
	'Census_FirmwareManufacturerIdentifier':                'float16',
	'Census_FirmwareVersionIdentifier':                     'float32',
	'Census_IsSecureBootEnabled':                           'int8',
	'Census_IsWIMBootEnabled':                              'float16',
	'Census_IsVirtualDevice':                               'float16',
	'Census_IsTouchEnabled':                                'int8',
	'Census_IsPenCapable':                                  'int8',
	'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
	'Wdft_IsGamer':                                         'float16',
	'Wdft_RegionIdentifier':                                'float16',
	'HasDetections':                                        'int8'
	}

def read_data(path):

	def labelEncode(df, encode=False):
		le = LabelEncoder()
		
		enc_columns = []
		# from https://www.kaggle.com/jiegeng94/everyone-do-this-at-the-beginning
		enc_columns += df.select_dtypes(include='category').columns.tolist()
		
		if not encode:
			for column in df:
				if df[column].isnull().any():
					enc_columns.append(column)
					
		# maintain unique list
		enc_columns = list(set(enc_columns))

		for col in enc_columns:
	#         df.replace({col: {np.nan:0}}, inplace=True)
			df[col] = df[col].fillna(df[col].mode(), inplace=True)
			df[col] = le.fit_transform(df[col])
		return df

	df = pd.read_csv(path, dtype=dtypes)

	try:
		df.rename({"Unnamed: 0":"a"}, axis="columns", inplace=True)
		df.drop(["a"], axis=1, inplace=True)
	except:
		pass


	# ***need to be able to explain why these columns are getting removed
	remove_cols = ['MachineIdentifier','PuaMode', 'Census_ProcessorClass', 'DefaultBrowsersIdentifier', 'Census_IsWIMBootEnabled', 'IsBeta', 'Census_IsFlightsDisabled', 'Census_IsFlightingInternal', 'AutoSampleOptIn', 'Census_ThresholdOptIn', 'SMode', 'Census_IsPortableOperatingSystem', 'Census_DeviceFamily', 'UacLuaenable', 'Census_IsVirtualDevice', 'ProductName', 'HasTpm', 'IsSxsPassiveMode', 'Firewall', 'AVProductsEnabled', 'RtpStateBitfield', 'OsVer', 'Platform', 'Census_IsPenCapable', 'OsSuite', 'IeVerIdentifier', 'Census_ProcessorManufacturerIdentifier', 'Census_InternalPrimaryDisplayResolutionVertical', 'Census_OSSkuName', 'Census_OSInstallLanguageIdentifier', 'OsBuild', 'Census_OSBuildNumber', 'Processor', 'SkuEdition']

	df.drop(remove_cols, axis=1, inplace=True)

	# *** WHY DO THIS?
	# Extract version from subversion
	df["AppVersion"] = df["AppVersion"].astype('category')
	df["AppVersion"] = df["AppVersion"].apply(lambda x:  (re.split(r'\.',x))[1])
	# df["AppVersion"].value_counts()


	# Extract version from EngineVersion
	df["EngineVersion"] = df["EngineVersion"].astype('category')
	df["EngineVersion"] = df["EngineVersion"].apply(lambda x:  (re.split(r'\.',x))[2])
	# df["EngineVersion"].value_counts()


	# Extract version from AvSigVersion
	df["AvSigVersion"] = df["AvSigVersion"].astype('category')
	df["AvSigVersion"] = df["AvSigVersion"].apply(lambda x:  (re.split(r'\.',x))[1])

	# this looks like all it's doing is correcting cases
	trans_dict = {
	'off': 'Off', '&#x02;': '2', '&#x01;': '1', 'on': 'On', 'requireadmin': 'RequireAdmin', 'OFF': 'Off', 
	'Promt': 'Prompt', 'requireAdmin': 'RequireAdmin', 'prompt': 'Prompt', 'warn': 'Warn', 
	'00000000': '0', '&#x03;': '3', np.nan: 'NoExist'
	}
	df.replace({'SmartScreen': trans_dict}, inplace=True)

	df.replace({'OrganizationIdentifier': {np.nan: 0}}, inplace=True)

	trans_dict = {
		'˙˙˙': 'unknown', 'unkn': 'unknown', np.nan: 'unknown'
	}
	df.replace({'Census_InternalBatteryType': trans_dict}, inplace=True)

	df['SmartScreen'] = df.SmartScreen.astype('category')
	df['Census_InternalBatteryType'] = df.Census_InternalBatteryType.astype('category')

	df = labelEncode(df)

	encode = ['EngineVersion', 'AppVersion', 'AvSigVersion']

	for col in encode:
	    df[col] = LabelEncoder().fit_transform(df[col])

	return df

df = read_data("input/train.csv")
print("Data read")
# y = df['HasDetections'].values
# cols = list(df)
# cols.remove('HasDetections')
# X = df[cols]

# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

# print("Starting model")
# clf = GaussianNB()
# print("Fitting Gaussian model")
# clf.fit(X_train, y_train)
# print("Predicting on y_pred")
# y_pred = clf.predict(X_test)
# print("Accuracy score:", accuracy_score(y_test, y_pred))

df[list(df)].to_csv("input/cleaned_input.csv")
