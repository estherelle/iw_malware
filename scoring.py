import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import (roc_curve, auc, accuracy_score)
import time

from clean_data import load

# model imports
import lightgbm as lgb
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression

from sklearn.naive_bayes import BernoulliNB

debug = True

print("Loading the data")

y_train = np.load("input/y_train.npy")
y_test = np.load("input/y_test.npy")

print("Data loaded")
if debug:
	X_train = pd.read_csv("input/X_train.csv", nrows=1200)
	y_train = y_train[:1000]
	X_test = X_train[1000:1200]
	X_train = X_train[:1000]
	y_test = y_test[1000:1200]
else:
	X_train = pd.read_csv("input/X_train.csv")
	X_test = pd.read_csv("input/X_test.csv")

X_train.drop('Unnamed: 0', axis=1, inplace=True)
X_test.drop('Unnamed: 0', axis=1, inplace=True)

# uncomment below if you want to run on the whole thing
# X = pd.read_csv("input/X.csv")
# y = np.load(y, "input/y.npy")


classifiers = {
	"RandomForest": RandomForestClassifier(),
	"AdaBoostClassifier": AdaBoostClassifier(),
	"GradientBoosting": GradientBoostingClassifier(),
	"BernoulliNB": BernoulliNB(),
	"LightGBM": lgb.LGBMClassifier()
}

clfs = list(classifiers.keys())
test_num = 1

rows_list = []
for clf in clfs:
	start = time.time()
	mdl = classifiers[clf]
	print("Proceeding to fit the %s model" %clf)

	mdl.fit(X_train, y_train)
	print("Model fit complete- moving on to predict")

	bin_pred = mdl.predict(X_test)
	prob_pred = mdl.predict_proba(X_test)

	time_taken = time.time() - start

	print("Finished predictions in %d seconds, saving predictions in input folder" %time_taken)

	np.save("input/%s_bin_%d.npy" %(clf, test_num), bin_pred)
	np.save("input/%s_prob_%d.npy" %(clf, test_num), prob_pred)

	
	print("Completed, total time taken:", time.time() - start, "\n")

	auc = metrics.roc_auc_score(y_test, prob_pred[::,1])

	detail_dict = {
		"Model": clf,
		"Binary_Accuracy": accuracy_score(y_test, bin_pred),
		"Proba_AUC": auc,
		"Bin_file": "input/%s_bin_%d.npy" %(clf, test_num),
		"Prob_file": "input/%s_prob_%d.npy" %(clf, test_num),
		"Time": time_taken
	}

	rows_list.append(detail_dict)


df = pd.DataFrame(rows_list)
df.to_csv("small_output.csv", index=False)


