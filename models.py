import numpy as np
# import dill
import pandas as pd
import os

# model imports
from sklearn.model_selection import train_test_split  
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.metrics import accuracy_score


# model imports
from sklearn.naive_bayes import GaussianNB
from sklearn.naive_bayes import BernoulliNB

from sklearn.ensemble import RandomForestClassifier

def split_df(df, label_enc=True, test_size=0.20):
    if label_enc:
        df = df.apply(LabelEncoder().fit_transform)
    return df


def preprocess(path):
    # data types for reading in the csv of data
    dtypes = {
            'MachineIdentifier':                                    'category',
            'ProductName':                                          'category',
            'EngineVersion':                                        'category',
            'AppVersion':                                           'category',
            'AvSigVersion':                                         'category',
            'IsBeta':                                               'int8',
            'RtpStateBitfield':                                     'float16',
            'IsSxsPassiveMode':                                     'int8',
            'DefaultBrowsersIdentifier':                            'float32',
            'AVProductStatesIdentifier':                            'float32',
            'AVProductsInstalled':                                  'float16',
            'AVProductsEnabled':                                    'float16',
            'HasTpm':                                               'int8',
            'CountryIdentifier':                                    'int16',
            'CityIdentifier':                                       'float32',
            'OrganizationIdentifier':                               'float16',
            'GeoNameIdentifier':                                    'float16',
            'LocaleEnglishNameIdentifier':                          'int16',
            'Platform':                                             'category',
            'Processor':                                            'category',
            'OsVer':                                                'category',
            'OsBuild':                                              'int16',
            'OsSuite':                                              'int16',
            'OsPlatformSubRelease':                                 'category',
            'OsBuildLab':                                           'category',
            'SkuEdition':                                           'category',
            'IsProtected':                                          'float16',
            'AutoSampleOptIn':                                      'int8',
            'PuaMode':                                              'category',
            'SMode':                                                'float16',
            'IeVerIdentifier':                                      'float16',
            'SmartScreen':                                          'category',
            'Firewall':                                             'float16',
            'UacLuaenable':                                         'float32',
            'UacLuaenable':                                         'float64', # was 'float32'
            'Census_MDC2FormFactor':                                'category',
            'Census_DeviceFamily':                                  'category',
            'Census_OEMNameIdentifier':                             'float32', # was 'float16'
            'Census_OEMModelIdentifier':                            'float32',
            'Census_ProcessorCoreCount':                            'float16',
            'Census_ProcessorManufacturerIdentifier':               'float16',
            'Census_ProcessorModelIdentifier':                      'float32', # was 'float16'
            'Census_ProcessorClass':                                'category',
            'Census_PrimaryDiskTotalCapacity':                      'float64', # was 'float32'
            'Census_PrimaryDiskTypeName':                           'category',
            'Census_SystemVolumeTotalCapacity':                     'float64', # was 'float32'
            'Census_HasOpticalDiskDrive':                           'int8',
            'Census_TotalPhysicalRAM':                              'float32',
            'Census_ChassisTypeName':                               'category',
            'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32', # was 'float16'
            'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32', # was 'float16'
            'Census_InternalPrimaryDisplayResolutionVertical':      'float32', # was 'float16'
            'Census_PowerPlatformRoleName':                         'category',
            'Census_InternalBatteryType':                           'category',
            'Census_InternalBatteryNumberOfCharges':                'float64', # was 'float32'
            'Census_OSVersion':                                     'category',
            'Census_OSArchitecture':                                'category',
            'Census_OSBranch':                                      'category',
            'Census_OSBuildNumber':                                 'int16',
            'Census_OSBuildRevision':                               'int32',
            'Census_OSEdition':                                     'category',
            'Census_OSSkuName':                                     'category',
            'Census_OSInstallTypeName':                             'category',
            'Census_OSInstallLanguageIdentifier':                   'float16',
            'Census_OSUILocaleIdentifier':                          'int16',
            'Census_OSWUAutoUpdateOptionsName':                     'category',
            'Census_IsPortableOperatingSystem':                     'int8',
            'Census_GenuineStateName':                              'category',
            'Census_ActivationChannel':                             'category',
            'Census_IsFlightingInternal':                           'float16',
            'Census_IsFlightsDisabled':                             'float16',
            'Census_FlightRing':                                    'category',
            'Census_ThresholdOptIn':                                'float16',
            'Census_FirmwareManufacturerIdentifier':                'float16',
            'Census_FirmwareVersionIdentifier':                     'float32',
            'Census_IsSecureBootEnabled':                           'int8',
            'Census_IsWIMBootEnabled':                              'float16',
            'Census_IsVirtualDevice':                               'float16',
            'Census_IsTouchEnabled':                                'int8',
            'Census_IsPenCapable':                                  'int8',
            'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
            'Wdft_IsGamer':                                         'float16',
            'Wdft_RegionIdentifier':                                'float16',
            'HasDetections':                                        'int8'
            }

    # read in the csv as a dataframe
    df = pd.read_csv(path, dtype=dtypes)

    # from notebook (Everyone do this in the beginning)
    remove_cols = ['MachineIdentifier','PuaMode', 'Census_ProcessorClass', 'DefaultBrowsersIdentifier', 'Census_IsWIMBootEnabled', 'IsBeta', 'Census_IsFlightsDisabled', 'Census_IsFlightingInternal', 'AutoSampleOptIn', 'Census_ThresholdOptIn', 'SMode', 'Census_IsPortableOperatingSystem', 'Census_DeviceFamily', 'UacLuaenable', 'Census_IsVirtualDevice', 'ProductName', 'HasTpm', 'IsSxsPassiveMode', 'Firewall', 'AVProductsEnabled', 'RtpStateBitfield', 'OsVer', 'Platform', 'Census_IsPenCapable', 'EngineVersion', 'OsSuite', 'IeVerIdentifier', 'Census_ProcessorManufacturerIdentifier', 'Census_InternalPrimaryDisplayResolutionVertical', 'Census_OSSkuName', 'Census_OSInstallLanguageIdentifier', 'OsBuild', 'Census_OSBuildNumber', 'Processor', 'SkuEdition']

    train = df.drop(remove_cols, axis=1, inplace=False)
    trans_dict = {
        'off': 'Off', '&#x02;': '2', '&#x01;': '1', 'on': 'On', 'requireadmin': 'RequireAdmin', 'OFF': 'Off', 
        'Promt': 'Prompt', 'requireAdmin': 'RequireAdmin', 'prompt': 'Prompt', 'warn': 'Warn', 
        '00000000': '0', '&#x03;': '3', np.nan: 'NoExist'
    }
    train.replace({'SmartScreen': trans_dict}, inplace=True)
    train.replace({'OrganizationIdentifier': {np.nan: 0}}, inplace=True)
    trans_dict = {
        '˙˙˙': 'unknown', 'unkn': 'unknown', np.nan: 'unknown'
    }
    train.replace({'Census_InternalBatteryType': trans_dict}, inplace=True)
    train.dropna(inplace=True)
    train['SmartScreen'] = train.SmartScreen.astype('category')
    train['Census_InternalBatteryType'] = train.Census_InternalBatteryType.astype('category')

    # for the purposes of label encoding
    cate_cols = train.select_dtypes(include='category').columns.tolist()

    le = LabelEncoder()
    for col in cate_cols:
    #     print(col)
        train[col] = le.fit_transform(train[col])
    
    return train

def getSplit(df):
    X = df.factorize(train['HasDetections'].values)[0].reshape(-1, 1)
    X_train, X_test, y_train, y_test = train_test_split(train.drop('HasDetections', axis=1), X, test_size = 0.2)
    return X_train, X_test, y_train, y_test



# some model fitting on split training sets
def runClf(train, model_name):
    X_train, X_test, y_train, y_test = getSplit(train)
    clf = None
    models = ["gaussian", "bernoulli", "logistic", "ridge"]
    if model_name.lower() == "gaussian":
        clf = GaussianNB()
    elif model_name.lower() == "bernoulli":
        clf = BernoulliNB()
    elif model_name.lower() == "logistic":
        clf = LogisticRegression()
    elif model_name.lower() == "ridge":
        clf = RidgeClassifier()
    else:
        print("The classifier must be one of the following:")
        print(models)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    print("The accuracy score was: ", accuracy_score(y_test, y_pred))
    
    return clf



